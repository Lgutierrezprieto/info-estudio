from sklearn.metrics import mean_absolute_error

y_pred = results.predict(X_train)
mean_absolute_error(y, y_pred)


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=4)

from sklearn.linear_model import LinearRegression
linreg = LinearRegression()
linreg.fit(X_train, y_train)

----------------------------------------------------------------------------------
#Import 
import pandas as pd

data = pd.read_csv('auto-mpg.csv', index_col=0)
data.head()

y = data['SalePrice']
X = data.drop(['SalePrice'], axis=1)


#Split data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=101)

#Linear Regression
from sklearn.linear_model import LinearRegression
lm = LinearRegression()

#ajuste del modelo
lm.fit(X_train, y_train)

#Predict
y_pred = lm.predict(X_train)

#Evaluation
# Evaluate using mean_squared_error with squared=False se obtiene el RMSE en vez dw MSE
baseline_rmse = mean_squared_error(y_train, y_pred,squared=False)


#Cross validation 
from sklearn.model_selection import cross_val_score
cross_val_score(lm, X_train, y_train)

cross_val_score(lm, X_train, y_train, scoring="neg_root_mean_squared_error") ---> se hace el score con el RMSE


Para m√°s info 
cross_validate(linreg, X, y, scoring=["r2", "neg_mean_squared_error"])

#PolynomialFeatures

Intanciar
poly = PolynomialFeatures()

Fit Transform 
poly.fit(X_train)

Transform
X_train_poly = poly.transform(X_train)

#Nuevo ajuste con las polyFeatures
lm.fit(X_train_poly, y_train)

#Predicciones
y_pred_poly = lm.predict(X_train_poly)

#Find the RMSE
poly_rmse= mean_squared_error(y_train, y_pred_poly, squared=False)
poly_rmse

#Cross validation with poly features
poly_cv = cross_val_score(lm, X_train_poly, y_train, scoring="neg_root_mean_squared_error")

# Display the average of the cross-validated scores
poly_cv_rmse = -(poly_cv.mean())
poly_cv_rmse

#Scalind Data
from sklearn.preprocessing import StandardScaler
# Instantiate the scaler
scaler = StandardScaler()

# Fit the scaler on X_train_poly
scaler.fit(X_train_poly)

# Transform the data and create a new matrix
X_train_scaled = scaler.transform(X_train_poly)

#Ridge
# Import the relevant class
from sklearn.linear_model import Ridge

# Instantiate the model with random_state=42
ridge_model = Ridge(random_state=42)

# Fit the model
ridge_model.fit(X_train_scaled, y_train)

# RMSE for training data
y_pred_ridge = ridge_model.predict(X_train_scaled)
ridge_rmse = mean_squared_error(y_train, y_pred_ridge, squared=False)

# RMSE for validation data
ridge_cv = cross_val_score(ridge_model, X_train_scaled, y_train, scoring="neg_root_mean_squared_error")
ridge_cv_rmse = -(ridge_cv.mean())

print("Train RMSE:", ridge_rmse)
print("Validation RMSE:", ridge_cv_rmse)


from sklearn.metrics import precision_score, recall_score, accuracy_score, f1_score

print('Training Precision: ', precision_score(y_train, y_hat_train))
print('Testing Precision: ', precision_score(y_test, y_hat_test))
print('\n\n')

print('Training Recall: ', recall_score(y_train, y_hat_train))
print('Testing Recall: ', recall_score(y_test, y_hat_test))
print('\n\n')

print('Training Accuracy: ', accuracy_score(y_train, y_hat_train))
print('Testing Accuracy: ', accuracy_score(y_test, y_hat_test))
print('\n\n')

print('Training F1-Score: ', f1_score(y_train, y_hat_train))
print('Testing F1-Score: ', f1_score(y_test, y_hat_test))

